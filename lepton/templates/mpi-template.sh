#!/bin/bash

# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############ auto generated by lepton ############
set -euo pipefail
trap -- 's=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

export DEBIAN_FRONTEND=noninteractive
export DEBIAN_PRIORITY=critical
apt-get -y -qq update
apt-get install -y -qq libibverbs-dev infiniband-diags openmpi-bin openmpi-doc libopenmpi-dev net-tools openssh-server openssh-client git

# Setup SSH
cat << EOF > /etc/ssh/sshd_config.d/lep.conf
PermitRootLogin yes
PubkeyAuthentication yes
Port 2222
StrictModes no
EOF

cat << EOF > /etc/ssh/ssh_config.d/lep.conf
Port 2222
StrictHostKeyChecking no
UserKnownHostsFile /dev/null
EOF

service ssh restart

# Setup the environment variables
export MASTER_ADDR=${LEPTON_JOB_WORKER_PREFIX}-0.${LEPTON_SUBDOMAIN}
export THIS_ADDR=${LEPTON_JOB_WORKER_PREFIX}-${LEPTON_JOB_WORKER_INDEX}.${LEPTON_SUBDOMAIN}
export NNODES=${LEPTON_JOB_TOTAL_WORKERS}
export NODE_RANK=${LEPTON_JOB_WORKER_INDEX}
export NGPUS=${LEPTON_RESOURCE_ACCELERATOR_NUM}

export HOST_ADDRS=$(seq 0 $((LEPTON_JOB_TOTAL_WORKERS - 1)) | xargs -I {} echo ${LEPTON_JOB_WORKER_PREFIX}-{}.${LEPTON_SUBDOMAIN} | paste -sd ',' -)
HOSTFILE=/tmp/hostfile.txt
rm -f $HOSTFILE
HOST_IPS=()

# Make sure all workers are ready
for i in $(seq 0 $((LEPTON_JOB_TOTAL_WORKERS - 1))); do
    NODE_NAME=${LEPTON_JOB_WORKER_PREFIX}-$i.${LEPTON_SUBDOMAIN}
    NODE_IP=""
    while [ -z "$NODE_IP" ]; do
        NODE_IP=$(getent hosts -- $NODE_NAME | awk '{ print $1 }' || echo "")
        if [ -z "$NODE_IP" ]; then
            sleep 5
        fi
    done
    WAIT_RETRY=60
    while ! ssh $NODE_IP -- echo ok 2>&1; do
        echo "waiting for server ping ..."
        WAIT_RETRY=$((WAIT_RETRY-1))
        if [ $WAIT_RETRY -eq 0 ]; then
            echo "timed out waiting host $NODE_IP to be ready"
            exit 1
        fi
        sleep 5
        echo "retry ssh to $NODE_IP"
    done
    if [ i == 0 ]; then
        export MASTER_IP=$NODE_IP
    fi
    HOST_IPS+=($NODE_IP)
    echo "$NODE_IP slots=${NGPUS}" >> $HOSTFILE
done
IFS=','; HOST_IPS="${HOST_IPS[*]}"; unset IFS

function barrier() {
    # ssh based barrier
    local barrier_dir="/tmp"
    local barrier_ctx="$1"
    mkdir -p ${barrier_dir}/${barrier_ctx}

    ssh ${MASTER_ADDR} mkdir -p ${barrier_dir}/${barrier_ctx}
    ssh ${MASTER_ADDR} touch ${barrier_dir}/${barrier_ctx}/worker-${NODE_RANK}
    if [ "$NODE_RANK" = "0" ]; then
        for i in $(seq 0 $(("$LEPTON_JOB_TOTAL_WORKERS" - 1))); do
            while ! [ -e "${barrier_dir}/${barrier_ctx}/worker-$i" ]; do
                echo "waiting file ${barrier_dir}/${barrier_ctx}/worker-$i written by worker $i"
                sleep 1
            done
        done
        # Rank0 send ack
        for i in $(seq 0 $(("$LEPTON_JOB_TOTAL_WORKERS" - 1))); do
            ssh ${LEPTON_JOB_WORKER_PREFIX}-${i}.${LEPTON_SUBDOMAIN} touch "${barrier_dir}/${barrier_ctx}/complete"
        done
    fi
    # All workers check ack
    while ! [ -e "${barrier_dir}/${barrier_ctx}/complete" ]; do
        echo "waiting file ${barrier_dir}/${barrier_ctx}/complete written by worker 0"
        sleep 1
    done
    # Clean barrier ctx
    rm -rf ${barrier_dir}/${barrier_ctx}
    echo "${NODE_RANK} exit barrier ${barrier_ctx}"
}

# Adjust environment variables
if [ ${NGPUS} != 8 ]; then
    # There are no ib devices for this resource shape, so we need to unset NCCL_SOCKET_IFNAME, GLOO_SOCKET_IFNAME
    unset NCCL_SOCKET_IFNAME
    unset GLOO_SOCKET_IFNAME
fi
########## end auto generated by lepton ##########


# check the machine topology
nvidia-smi topo -m

barrier "prepare-finished"

# Rank0 is the head node, and other workers will wait for it to complete
COMPLETE_FILE="/tmp/lepton-mpi-complete"
if [[ $LEPTON_JOB_WORKER_INDEX -eq 0 ]]; then
    # Rank0 starts mpirun
    mpirun --allow-run-as-root -verbose -np $(($NGPUS*$NNODES)) --hostfile $HOSTFILE \
    -x NCCL_DEBUG=INFO all_reduce_perf_mpi -b 1G -e 16G -f 2 -g 1

    mpi_ret_code=$?

    # Rank0 notifies other workers the job is done
    mpirun --map-by ppr:1:node -hostfile $HOSTFILE --allow-run-as-root touch ${COMPLETE_FILE}

    if [ $mpi_ret_code -ne 0 ]; then
        echo "MPI job failed with exit code $mpi_ret_code"
        exit $mpi_ret_code
    else
        echo "MPI job completed!"
    fi
else
    # Other workers wait for rank0 to complete
    while true; do
        [ ! -f "${COMPLETE_FILE}" ] || break
        sleep 5
    done
    exit 0
fi

